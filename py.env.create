#!/usr/bin/env bash

# TODO check, if a virtEnv with identical name already exists
# TODO check, if a hidden ".python-version" file already exists

unset pyEnvName pyEnvTrigger pyVersion

function printHeader {
    clear
    echo
    echo "*******************************************************************************"
    echo "****              Developer ITools v0.9                                    ****"
    echo "****              Create a virtual Python environment                      ****"
    echo "*******************************************************************************"
    echo
}

if [[ $# = 1 ]]; then
    pyEnvName=$1
elif [[ $# = 2 ]]; then
    pyVersion=$1
    pyEnvName=$2
fi

unset reply
if [[ $pyVersion == "" ]]; then
    while [[ $reply == "" ]]; do
        printHeader
        echo "I'm going to use $(python -V) for this virtual environment"
        echo "Is this correct (y/n)?"
        read -p "--> " reply
    done

    if [[ $reply == "n" ]]; then
        while [[ $pyVersion == "" ]]; do
            printHeader
            echo
            echo "Please enter a suitable python version then"
            read -p "--> " pyVersion
        done
    fi
fi

unset reply
if [[ $pyEnvName = "" ]]; then
    while [[ $reply == "" ]]; do
        printHeader
        echo
        echo "Shall I use the name of your working directory: \"$(basename $(pwd))\" (y/n)?"
        read -p "--> " reply
    done

    if [[ $reply == "y" ]]; then
        pyEnvName=$(basename $(pwd))
    else
        while [[ $pyEnvName == "" ]]; do
            printHeader
            echo
            echo "Please enter the name of the virtual environment"
            read -p "--> " pyEnvName
        done
    fi
fi

while [[ $pyEnvTrigger = "" ]]; do
    printHeader
    echo
    echo "Shall I set up a trigger for your working directoy \"$(basename $(pwd))\" (y/n)?"
    read -p "--> " pyEnvTrigger
done

pyenv virtualenv $pyVersion $pyEnvName

if [[ $pyEnvTrigger == "y" ]]; then
    pyenv local $pyEnvName
fi
